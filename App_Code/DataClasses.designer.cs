#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.261
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbs")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 可扩展性方法定义
  partial void OnCreated();
  partial void Insertmedia(media instance);
  partial void Updatemedia(media instance);
  partial void Deletemedia(media instance);
  partial void Insertusers(users instance);
  partial void Updateusers(users instance);
  partial void Deleteusers(users instance);
  partial void InsertmediaComments(mediaComments instance);
  partial void UpdatemediaComments(mediaComments instance);
  partial void DeletemediaComments(mediaComments instance);
  partial void InsertmediaCommentVoteRecords(mediaCommentVoteRecords instance);
  partial void UpdatemediaCommentVoteRecords(mediaCommentVoteRecords instance);
  partial void DeletemediaCommentVoteRecords(mediaCommentVoteRecords instance);
  partial void InsertmediaMarks(mediaMarks instance);
  partial void UpdatemediaMarks(mediaMarks instance);
  partial void DeletemediaMarks(mediaMarks instance);
  partial void InsertmediaType(mediaType instance);
  partial void UpdatemediaType(mediaType instance);
  partial void DeletemediaType(mediaType instance);
  partial void InsertmediaVoteRecords(mediaVoteRecords instance);
  partial void UpdatemediaVoteRecords(mediaVoteRecords instance);
  partial void DeletemediaVoteRecords(mediaVoteRecords instance);
  partial void InsertrelatedMarkNMedia(relatedMarkNMedia instance);
  partial void UpdaterelatedMarkNMedia(relatedMarkNMedia instance);
  partial void DeleterelatedMarkNMedia(relatedMarkNMedia instance);
  partial void InsertuserMediaFolder(userMediaFolder instance);
  partial void UpdateuserMediaFolder(userMediaFolder instance);
  partial void DeleteuserMediaFolder(userMediaFolder instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["dbsConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<media> media
	{
		get
		{
			return this.GetTable<media>();
		}
	}
	
	public System.Data.Linq.Table<users> users
	{
		get
		{
			return this.GetTable<users>();
		}
	}
	
	public System.Data.Linq.Table<mediaComments> mediaComments
	{
		get
		{
			return this.GetTable<mediaComments>();
		}
	}
	
	public System.Data.Linq.Table<mediaCommentVoteRecords> mediaCommentVoteRecords
	{
		get
		{
			return this.GetTable<mediaCommentVoteRecords>();
		}
	}
	
	public System.Data.Linq.Table<mediaMarks> mediaMarks
	{
		get
		{
			return this.GetTable<mediaMarks>();
		}
	}
	
	public System.Data.Linq.Table<mediaType> mediaType
	{
		get
		{
			return this.GetTable<mediaType>();
		}
	}
	
	public System.Data.Linq.Table<mediaVoteRecords> mediaVoteRecords
	{
		get
		{
			return this.GetTable<mediaVoteRecords>();
		}
	}
	
	public System.Data.Linq.Table<relatedMarkNMedia> relatedMarkNMedia
	{
		get
		{
			return this.GetTable<relatedMarkNMedia>();
		}
	}
	
	public System.Data.Linq.Table<userMediaFolder> userMediaFolder
	{
		get
		{
			return this.GetTable<userMediaFolder>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NewUser")]
	public ISingleResult<NewUserResult> NewUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(20)")] string nickname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(32)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(1)")] System.Nullable<char> gender, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] System.Nullable<System.DateTime> birthday, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(200)")] string statement, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> exp)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nickname, email, password, gender, birthday, statement, exp);
		return ((ISingleResult<NewUserResult>)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NewMedia")]
	public ISingleResult<media> NewMedia([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> userid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(256)")] string originFileName)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userid, originFileName);
		return ((ISingleResult<media>)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.media")]
public partial class media : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _id;
	
	private string _tittle;
	
	private System.Nullable<int> _typeID;
	
	private double _lasttimeSeconds;
	
	private string _comment;
	
	private System.DateTime _uploadedTime;
	
	private int _ownerID;
	
	private string _authorization;
	
	private string _protectingPwd;
	
	private int _votedScore;
	
	private int _votedTimes;
	
	private System.Nullable<System.Guid> _userFolderID;
	
	private bool _Converting;
	
	private string _OriginFileName;
	
	private System.Data.Linq.Binary _thumbnail;
	
	private int _watchedTimes;
	
	private EntitySet<mediaComments> _mediaComments;
	
	private EntitySet<mediaVoteRecords> _mediaVoteRecords;
	
	private EntitySet<relatedMarkNMedia> _relatedMarkNMedia;
	
	private EntityRef<users> _users;
	
	private EntityRef<mediaType> _mediaType;
	
	private EntityRef<userMediaFolder> _userMediaFolder;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OntittleChanging(string value);
    partial void OntittleChanged();
    partial void OntypeIDChanging(System.Nullable<int> value);
    partial void OntypeIDChanged();
    partial void OnlasttimeSecondsChanging(double value);
    partial void OnlasttimeSecondsChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnuploadedTimeChanging(System.DateTime value);
    partial void OnuploadedTimeChanged();
    partial void OnownerIDChanging(int value);
    partial void OnownerIDChanged();
    partial void OnauthorizationChanging(string value);
    partial void OnauthorizationChanged();
    partial void OnprotectingPwdChanging(string value);
    partial void OnprotectingPwdChanged();
    partial void OnvotedScoreChanging(int value);
    partial void OnvotedScoreChanged();
    partial void OnvotedTimesChanging(int value);
    partial void OnvotedTimesChanged();
    partial void OnuserFolderIDChanging(System.Nullable<System.Guid> value);
    partial void OnuserFolderIDChanged();
    partial void OnConvertingChanging(bool value);
    partial void OnConvertingChanged();
    partial void OnOriginFileNameChanging(string value);
    partial void OnOriginFileNameChanged();
    partial void OnthumbnailChanging(System.Data.Linq.Binary value);
    partial void OnthumbnailChanged();
    partial void OnwatchedTimesChanging(int value);
    partial void OnwatchedTimesChanged();
    #endregion
	
	public media()
	{
		this._mediaComments = new EntitySet<mediaComments>(new Action<mediaComments>(this.attach_mediaComments), new Action<mediaComments>(this.detach_mediaComments));
		this._mediaVoteRecords = new EntitySet<mediaVoteRecords>(new Action<mediaVoteRecords>(this.attach_mediaVoteRecords), new Action<mediaVoteRecords>(this.detach_mediaVoteRecords));
		this._relatedMarkNMedia = new EntitySet<relatedMarkNMedia>(new Action<relatedMarkNMedia>(this.attach_relatedMarkNMedia), new Action<relatedMarkNMedia>(this.detach_relatedMarkNMedia));
		this._users = default(EntityRef<users>);
		this._mediaType = default(EntityRef<mediaType>);
		this._userMediaFolder = default(EntityRef<userMediaFolder>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tittle", DbType="NChar(32) NOT NULL", CanBeNull=false)]
	public string tittle
	{
		get
		{
			return this._tittle;
		}
		set
		{
			if ((this._tittle != value))
			{
				this.OntittleChanging(value);
				this.SendPropertyChanging();
				this._tittle = value;
				this.SendPropertyChanged("tittle");
				this.OntittleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int")]
	public System.Nullable<int> typeID
	{
		get
		{
			return this._typeID;
		}
		set
		{
			if ((this._typeID != value))
			{
				if (this._mediaType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OntypeIDChanging(value);
				this.SendPropertyChanging();
				this._typeID = value;
				this.SendPropertyChanged("typeID");
				this.OntypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lasttimeSeconds", DbType="Float NOT NULL")]
	public double lasttimeSeconds
	{
		get
		{
			return this._lasttimeSeconds;
		}
		set
		{
			if ((this._lasttimeSeconds != value))
			{
				this.OnlasttimeSecondsChanging(value);
				this.SendPropertyChanging();
				this._lasttimeSeconds = value;
				this.SendPropertyChanged("lasttimeSeconds");
				this.OnlasttimeSecondsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(2048)")]
	public string comment
	{
		get
		{
			return this._comment;
		}
		set
		{
			if ((this._comment != value))
			{
				this.OncommentChanging(value);
				this.SendPropertyChanging();
				this._comment = value;
				this.SendPropertyChanged("comment");
				this.OncommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uploadedTime", DbType="SmallDateTime NOT NULL")]
	public System.DateTime uploadedTime
	{
		get
		{
			return this._uploadedTime;
		}
		set
		{
			if ((this._uploadedTime != value))
			{
				this.OnuploadedTimeChanging(value);
				this.SendPropertyChanging();
				this._uploadedTime = value;
				this.SendPropertyChanged("uploadedTime");
				this.OnuploadedTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ownerID", DbType="Int NOT NULL")]
	public int ownerID
	{
		get
		{
			return this._ownerID;
		}
		set
		{
			if ((this._ownerID != value))
			{
				if (this._users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnownerIDChanging(value);
				this.SendPropertyChanging();
				this._ownerID = value;
				this.SendPropertyChanged("ownerID");
				this.OnownerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[authorization]", Storage="_authorization", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string authorization
	{
		get
		{
			return this._authorization;
		}
		set
		{
			if ((this._authorization != value))
			{
				this.OnauthorizationChanging(value);
				this.SendPropertyChanging();
				this._authorization = value;
				this.SendPropertyChanged("authorization");
				this.OnauthorizationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_protectingPwd", DbType="NChar(32)")]
	public string protectingPwd
	{
		get
		{
			return this._protectingPwd;
		}
		set
		{
			if ((this._protectingPwd != value))
			{
				this.OnprotectingPwdChanging(value);
				this.SendPropertyChanging();
				this._protectingPwd = value;
				this.SendPropertyChanged("protectingPwd");
				this.OnprotectingPwdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_votedScore", DbType="Int NOT NULL")]
	public int votedScore
	{
		get
		{
			return this._votedScore;
		}
		set
		{
			if ((this._votedScore != value))
			{
				this.OnvotedScoreChanging(value);
				this.SendPropertyChanging();
				this._votedScore = value;
				this.SendPropertyChanged("votedScore");
				this.OnvotedScoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_votedTimes", DbType="Int NOT NULL")]
	public int votedTimes
	{
		get
		{
			return this._votedTimes;
		}
		set
		{
			if ((this._votedTimes != value))
			{
				this.OnvotedTimesChanging(value);
				this.SendPropertyChanging();
				this._votedTimes = value;
				this.SendPropertyChanged("votedTimes");
				this.OnvotedTimesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userFolderID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> userFolderID
	{
		get
		{
			return this._userFolderID;
		}
		set
		{
			if ((this._userFolderID != value))
			{
				if (this._userMediaFolder.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserFolderIDChanging(value);
				this.SendPropertyChanging();
				this._userFolderID = value;
				this.SendPropertyChanged("userFolderID");
				this.OnuserFolderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Converting", DbType="Bit NOT NULL")]
	public bool Converting
	{
		get
		{
			return this._Converting;
		}
		set
		{
			if ((this._Converting != value))
			{
				this.OnConvertingChanging(value);
				this.SendPropertyChanging();
				this._Converting = value;
				this.SendPropertyChanged("Converting");
				this.OnConvertingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginFileName", DbType="NChar(256) NOT NULL", CanBeNull=false)]
	public string OriginFileName
	{
		get
		{
			return this._OriginFileName;
		}
		set
		{
			if ((this._OriginFileName != value))
			{
				this.OnOriginFileNameChanging(value);
				this.SendPropertyChanging();
				this._OriginFileName = value;
				this.SendPropertyChanged("OriginFileName");
				this.OnOriginFileNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thumbnail", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary thumbnail
	{
		get
		{
			return this._thumbnail;
		}
		set
		{
			if ((this._thumbnail != value))
			{
				this.OnthumbnailChanging(value);
				this.SendPropertyChanging();
				this._thumbnail = value;
				this.SendPropertyChanged("thumbnail");
				this.OnthumbnailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_watchedTimes", DbType="Int NOT NULL")]
	public int watchedTimes
	{
		get
		{
			return this._watchedTimes;
		}
		set
		{
			if ((this._watchedTimes != value))
			{
				this.OnwatchedTimesChanging(value);
				this.SendPropertyChanging();
				this._watchedTimes = value;
				this.SendPropertyChanged("watchedTimes");
				this.OnwatchedTimesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="media_mediaComments", Storage="_mediaComments", ThisKey="id", OtherKey="mediaID")]
	public EntitySet<mediaComments> mediaComments
	{
		get
		{
			return this._mediaComments;
		}
		set
		{
			this._mediaComments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="media_mediaVoteRecords", Storage="_mediaVoteRecords", ThisKey="id", OtherKey="mediaID")]
	public EntitySet<mediaVoteRecords> mediaVoteRecords
	{
		get
		{
			return this._mediaVoteRecords;
		}
		set
		{
			this._mediaVoteRecords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="media_relatedMarkNMedia", Storage="_relatedMarkNMedia", ThisKey="id", OtherKey="mediaid")]
	public EntitySet<relatedMarkNMedia> relatedMarkNMedia
	{
		get
		{
			return this._relatedMarkNMedia;
		}
		set
		{
			this._relatedMarkNMedia.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_media", Storage="_users", ThisKey="ownerID", OtherKey="id", IsForeignKey=true)]
	public users users
	{
		get
		{
			return this._users.Entity;
		}
		set
		{
			users previousValue = this._users.Entity;
			if (((previousValue != value) 
						|| (this._users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._users.Entity = null;
					previousValue.media.Remove(this);
				}
				this._users.Entity = value;
				if ((value != null))
				{
					value.media.Add(this);
					this._ownerID = value.id;
				}
				else
				{
					this._ownerID = default(int);
				}
				this.SendPropertyChanged("users");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaType_media", Storage="_mediaType", ThisKey="typeID", OtherKey="id", IsForeignKey=true)]
	public mediaType mediaType
	{
		get
		{
			return this._mediaType.Entity;
		}
		set
		{
			mediaType previousValue = this._mediaType.Entity;
			if (((previousValue != value) 
						|| (this._mediaType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._mediaType.Entity = null;
					previousValue.media.Remove(this);
				}
				this._mediaType.Entity = value;
				if ((value != null))
				{
					value.media.Add(this);
					this._typeID = value.id;
				}
				else
				{
					this._typeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("mediaType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userMediaFolder_media", Storage="_userMediaFolder", ThisKey="userFolderID", OtherKey="id", IsForeignKey=true)]
	public userMediaFolder userMediaFolder
	{
		get
		{
			return this._userMediaFolder.Entity;
		}
		set
		{
			userMediaFolder previousValue = this._userMediaFolder.Entity;
			if (((previousValue != value) 
						|| (this._userMediaFolder.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._userMediaFolder.Entity = null;
					previousValue.media.Remove(this);
				}
				this._userMediaFolder.Entity = value;
				if ((value != null))
				{
					value.media.Add(this);
					this._userFolderID = value.id;
				}
				else
				{
					this._userFolderID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("userMediaFolder");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_mediaComments(mediaComments entity)
	{
		this.SendPropertyChanging();
		entity.media = this;
	}
	
	private void detach_mediaComments(mediaComments entity)
	{
		this.SendPropertyChanging();
		entity.media = null;
	}
	
	private void attach_mediaVoteRecords(mediaVoteRecords entity)
	{
		this.SendPropertyChanging();
		entity.media = this;
	}
	
	private void detach_mediaVoteRecords(mediaVoteRecords entity)
	{
		this.SendPropertyChanging();
		entity.media = null;
	}
	
	private void attach_relatedMarkNMedia(relatedMarkNMedia entity)
	{
		this.SendPropertyChanging();
		entity.media = this;
	}
	
	private void detach_relatedMarkNMedia(relatedMarkNMedia entity)
	{
		this.SendPropertyChanging();
		entity.media = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
public partial class users : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _nickname;
	
	private string _email;
	
	private string _password;
	
	private System.Nullable<char> _gender;
	
	private System.Nullable<System.DateTime> _birthday;
	
	private string _statement;
	
	private int _exp;
	
	private System.Data.Linq.Binary _profImage;
	
	private EntitySet<media> _media;
	
	private EntitySet<mediaComments> _mediaComments;
	
	private EntitySet<mediaCommentVoteRecords> _mediaCommentVoteRecords;
	
	private EntitySet<mediaVoteRecords> _mediaVoteRecords;
	
	private EntitySet<userMediaFolder> _userMediaFolder;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnicknameChanging(string value);
    partial void OnnicknameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OngenderChanging(System.Nullable<char> value);
    partial void OngenderChanged();
    partial void OnbirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnbirthdayChanged();
    partial void OnstatementChanging(string value);
    partial void OnstatementChanged();
    partial void OnexpChanging(int value);
    partial void OnexpChanged();
    partial void OnprofImageChanging(System.Data.Linq.Binary value);
    partial void OnprofImageChanged();
    #endregion
	
	public users()
	{
		this._media = new EntitySet<media>(new Action<media>(this.attach_media), new Action<media>(this.detach_media));
		this._mediaComments = new EntitySet<mediaComments>(new Action<mediaComments>(this.attach_mediaComments), new Action<mediaComments>(this.detach_mediaComments));
		this._mediaCommentVoteRecords = new EntitySet<mediaCommentVoteRecords>(new Action<mediaCommentVoteRecords>(this.attach_mediaCommentVoteRecords), new Action<mediaCommentVoteRecords>(this.detach_mediaCommentVoteRecords));
		this._mediaVoteRecords = new EntitySet<mediaVoteRecords>(new Action<mediaVoteRecords>(this.attach_mediaVoteRecords), new Action<mediaVoteRecords>(this.detach_mediaVoteRecords));
		this._userMediaFolder = new EntitySet<userMediaFolder>(new Action<userMediaFolder>(this.attach_userMediaFolder), new Action<userMediaFolder>(this.detach_userMediaFolder));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nickname", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string nickname
	{
		get
		{
			return this._nickname;
		}
		set
		{
			if ((this._nickname != value))
			{
				this.OnnicknameChanging(value);
				this.SendPropertyChanging();
				this._nickname = value;
				this.SendPropertyChanged("nickname");
				this.OnnicknameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(32) NOT NULL", CanBeNull=false)]
	public string password
	{
		get
		{
			return this._password;
		}
		set
		{
			if ((this._password != value))
			{
				this.OnpasswordChanging(value);
				this.SendPropertyChanging();
				this._password = value;
				this.SendPropertyChanged("password");
				this.OnpasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NChar(1)")]
	public System.Nullable<char> gender
	{
		get
		{
			return this._gender;
		}
		set
		{
			if ((this._gender != value))
			{
				this.OngenderChanging(value);
				this.SendPropertyChanging();
				this._gender = value;
				this.SendPropertyChanged("gender");
				this.OngenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> birthday
	{
		get
		{
			return this._birthday;
		}
		set
		{
			if ((this._birthday != value))
			{
				this.OnbirthdayChanging(value);
				this.SendPropertyChanging();
				this._birthday = value;
				this.SendPropertyChanged("birthday");
				this.OnbirthdayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statement", DbType="NVarChar(200)")]
	public string statement
	{
		get
		{
			return this._statement;
		}
		set
		{
			if ((this._statement != value))
			{
				this.OnstatementChanging(value);
				this.SendPropertyChanging();
				this._statement = value;
				this.SendPropertyChanged("statement");
				this.OnstatementChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exp", DbType="Int NOT NULL")]
	public int exp
	{
		get
		{
			return this._exp;
		}
		set
		{
			if ((this._exp != value))
			{
				this.OnexpChanging(value);
				this.SendPropertyChanging();
				this._exp = value;
				this.SendPropertyChanged("exp");
				this.OnexpChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profImage", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary profImage
	{
		get
		{
			return this._profImage;
		}
		set
		{
			if ((this._profImage != value))
			{
				this.OnprofImageChanging(value);
				this.SendPropertyChanging();
				this._profImage = value;
				this.SendPropertyChanged("profImage");
				this.OnprofImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_media", Storage="_media", ThisKey="id", OtherKey="ownerID")]
	public EntitySet<media> media
	{
		get
		{
			return this._media;
		}
		set
		{
			this._media.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_mediaComments", Storage="_mediaComments", ThisKey="id", OtherKey="userID")]
	public EntitySet<mediaComments> mediaComments
	{
		get
		{
			return this._mediaComments;
		}
		set
		{
			this._mediaComments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_mediaCommentVoteRecords", Storage="_mediaCommentVoteRecords", ThisKey="id", OtherKey="userID")]
	public EntitySet<mediaCommentVoteRecords> mediaCommentVoteRecords
	{
		get
		{
			return this._mediaCommentVoteRecords;
		}
		set
		{
			this._mediaCommentVoteRecords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_mediaVoteRecords", Storage="_mediaVoteRecords", ThisKey="id", OtherKey="userID")]
	public EntitySet<mediaVoteRecords> mediaVoteRecords
	{
		get
		{
			return this._mediaVoteRecords;
		}
		set
		{
			this._mediaVoteRecords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_userMediaFolder", Storage="_userMediaFolder", ThisKey="id", OtherKey="ownerID")]
	public EntitySet<userMediaFolder> userMediaFolder
	{
		get
		{
			return this._userMediaFolder;
		}
		set
		{
			this._userMediaFolder.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_media(media entity)
	{
		this.SendPropertyChanging();
		entity.users = this;
	}
	
	private void detach_media(media entity)
	{
		this.SendPropertyChanging();
		entity.users = null;
	}
	
	private void attach_mediaComments(mediaComments entity)
	{
		this.SendPropertyChanging();
		entity.users = this;
	}
	
	private void detach_mediaComments(mediaComments entity)
	{
		this.SendPropertyChanging();
		entity.users = null;
	}
	
	private void attach_mediaCommentVoteRecords(mediaCommentVoteRecords entity)
	{
		this.SendPropertyChanging();
		entity.users = this;
	}
	
	private void detach_mediaCommentVoteRecords(mediaCommentVoteRecords entity)
	{
		this.SendPropertyChanging();
		entity.users = null;
	}
	
	private void attach_mediaVoteRecords(mediaVoteRecords entity)
	{
		this.SendPropertyChanging();
		entity.users = this;
	}
	
	private void detach_mediaVoteRecords(mediaVoteRecords entity)
	{
		this.SendPropertyChanging();
		entity.users = null;
	}
	
	private void attach_userMediaFolder(userMediaFolder entity)
	{
		this.SendPropertyChanging();
		entity.users = this;
	}
	
	private void detach_userMediaFolder(userMediaFolder entity)
	{
		this.SendPropertyChanging();
		entity.users = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mediaComments")]
public partial class mediaComments : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _id;
	
	private System.Nullable<System.Guid> _fatherID;
	
	private System.Guid _mediaID;
	
	private int _userID;
	
	private string _comment;
	
	private int _good;
	
	private int _bad;
	
	private EntitySet<mediaComments> _mediaComments2;
	
	private EntitySet<mediaCommentVoteRecords> _mediaCommentVoteRecords;
	
	private EntityRef<media> _media;
	
	private EntityRef<mediaComments> _mediaComments1;
	
	private EntityRef<users> _users;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnfatherIDChanging(System.Nullable<System.Guid> value);
    partial void OnfatherIDChanged();
    partial void OnmediaIDChanging(System.Guid value);
    partial void OnmediaIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OngoodChanging(int value);
    partial void OngoodChanged();
    partial void OnbadChanging(int value);
    partial void OnbadChanged();
    #endregion
	
	public mediaComments()
	{
		this._mediaComments2 = new EntitySet<mediaComments>(new Action<mediaComments>(this.attach_mediaComments2), new Action<mediaComments>(this.detach_mediaComments2));
		this._mediaCommentVoteRecords = new EntitySet<mediaCommentVoteRecords>(new Action<mediaCommentVoteRecords>(this.attach_mediaCommentVoteRecords), new Action<mediaCommentVoteRecords>(this.detach_mediaCommentVoteRecords));
		this._media = default(EntityRef<media>);
		this._mediaComments1 = default(EntityRef<mediaComments>);
		this._users = default(EntityRef<users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fatherID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> fatherID
	{
		get
		{
			return this._fatherID;
		}
		set
		{
			if ((this._fatherID != value))
			{
				if (this._mediaComments1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfatherIDChanging(value);
				this.SendPropertyChanging();
				this._fatherID = value;
				this.SendPropertyChanged("fatherID");
				this.OnfatherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaID", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid mediaID
	{
		get
		{
			return this._mediaID;
		}
		set
		{
			if ((this._mediaID != value))
			{
				if (this._media.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnmediaIDChanging(value);
				this.SendPropertyChanging();
				this._mediaID = value;
				this.SendPropertyChanged("mediaID");
				this.OnmediaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(2048) NOT NULL", CanBeNull=false)]
	public string comment
	{
		get
		{
			return this._comment;
		}
		set
		{
			if ((this._comment != value))
			{
				this.OncommentChanging(value);
				this.SendPropertyChanging();
				this._comment = value;
				this.SendPropertyChanged("comment");
				this.OncommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_good", DbType="Int NOT NULL")]
	public int good
	{
		get
		{
			return this._good;
		}
		set
		{
			if ((this._good != value))
			{
				this.OngoodChanging(value);
				this.SendPropertyChanging();
				this._good = value;
				this.SendPropertyChanged("good");
				this.OngoodChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bad", DbType="Int NOT NULL")]
	public int bad
	{
		get
		{
			return this._bad;
		}
		set
		{
			if ((this._bad != value))
			{
				this.OnbadChanging(value);
				this.SendPropertyChanging();
				this._bad = value;
				this.SendPropertyChanged("bad");
				this.OnbadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaComments_mediaComments", Storage="_mediaComments2", ThisKey="id", OtherKey="fatherID")]
	public EntitySet<mediaComments> mediaComments2
	{
		get
		{
			return this._mediaComments2;
		}
		set
		{
			this._mediaComments2.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaComments_mediaCommentVoteRecords", Storage="_mediaCommentVoteRecords", ThisKey="id", OtherKey="mediaCommentID")]
	public EntitySet<mediaCommentVoteRecords> mediaCommentVoteRecords
	{
		get
		{
			return this._mediaCommentVoteRecords;
		}
		set
		{
			this._mediaCommentVoteRecords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="media_mediaComments", Storage="_media", ThisKey="mediaID", OtherKey="id", IsForeignKey=true)]
	public media media
	{
		get
		{
			return this._media.Entity;
		}
		set
		{
			media previousValue = this._media.Entity;
			if (((previousValue != value) 
						|| (this._media.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._media.Entity = null;
					previousValue.mediaComments.Remove(this);
				}
				this._media.Entity = value;
				if ((value != null))
				{
					value.mediaComments.Add(this);
					this._mediaID = value.id;
				}
				else
				{
					this._mediaID = default(System.Guid);
				}
				this.SendPropertyChanged("media");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaComments_mediaComments", Storage="_mediaComments1", ThisKey="fatherID", OtherKey="id", IsForeignKey=true)]
	public mediaComments mediaComments1
	{
		get
		{
			return this._mediaComments1.Entity;
		}
		set
		{
			mediaComments previousValue = this._mediaComments1.Entity;
			if (((previousValue != value) 
						|| (this._mediaComments1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._mediaComments1.Entity = null;
					previousValue.mediaComments2.Remove(this);
				}
				this._mediaComments1.Entity = value;
				if ((value != null))
				{
					value.mediaComments2.Add(this);
					this._fatherID = value.id;
				}
				else
				{
					this._fatherID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("mediaComments1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_mediaComments", Storage="_users", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
	public users users
	{
		get
		{
			return this._users.Entity;
		}
		set
		{
			users previousValue = this._users.Entity;
			if (((previousValue != value) 
						|| (this._users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._users.Entity = null;
					previousValue.mediaComments.Remove(this);
				}
				this._users.Entity = value;
				if ((value != null))
				{
					value.mediaComments.Add(this);
					this._userID = value.id;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_mediaComments2(mediaComments entity)
	{
		this.SendPropertyChanging();
		entity.mediaComments1 = this;
	}
	
	private void detach_mediaComments2(mediaComments entity)
	{
		this.SendPropertyChanging();
		entity.mediaComments1 = null;
	}
	
	private void attach_mediaCommentVoteRecords(mediaCommentVoteRecords entity)
	{
		this.SendPropertyChanging();
		entity.mediaComments = this;
	}
	
	private void detach_mediaCommentVoteRecords(mediaCommentVoteRecords entity)
	{
		this.SendPropertyChanging();
		entity.mediaComments = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mediaCommentVoteRecords")]
public partial class mediaCommentVoteRecords : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private System.Guid _mediaCommentID;
	
	private EntityRef<mediaComments> _mediaComments;
	
	private EntityRef<users> _users;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnmediaCommentIDChanging(System.Guid value);
    partial void OnmediaCommentIDChanged();
    #endregion
	
	public mediaCommentVoteRecords()
	{
		this._mediaComments = default(EntityRef<mediaComments>);
		this._users = default(EntityRef<users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaCommentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid mediaCommentID
	{
		get
		{
			return this._mediaCommentID;
		}
		set
		{
			if ((this._mediaCommentID != value))
			{
				if (this._mediaComments.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnmediaCommentIDChanging(value);
				this.SendPropertyChanging();
				this._mediaCommentID = value;
				this.SendPropertyChanged("mediaCommentID");
				this.OnmediaCommentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaComments_mediaCommentVoteRecords", Storage="_mediaComments", ThisKey="mediaCommentID", OtherKey="id", IsForeignKey=true)]
	public mediaComments mediaComments
	{
		get
		{
			return this._mediaComments.Entity;
		}
		set
		{
			mediaComments previousValue = this._mediaComments.Entity;
			if (((previousValue != value) 
						|| (this._mediaComments.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._mediaComments.Entity = null;
					previousValue.mediaCommentVoteRecords.Remove(this);
				}
				this._mediaComments.Entity = value;
				if ((value != null))
				{
					value.mediaCommentVoteRecords.Add(this);
					this._mediaCommentID = value.id;
				}
				else
				{
					this._mediaCommentID = default(System.Guid);
				}
				this.SendPropertyChanged("mediaComments");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_mediaCommentVoteRecords", Storage="_users", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
	public users users
	{
		get
		{
			return this._users.Entity;
		}
		set
		{
			users previousValue = this._users.Entity;
			if (((previousValue != value) 
						|| (this._users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._users.Entity = null;
					previousValue.mediaCommentVoteRecords.Remove(this);
				}
				this._users.Entity = value;
				if ((value != null))
				{
					value.mediaCommentVoteRecords.Add(this);
					this._userID = value.id;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mediaMarks")]
public partial class mediaMarks : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _id;
	
	private string _mark;
	
	private EntitySet<relatedMarkNMedia> _relatedMarkNMedia;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnmarkChanging(string value);
    partial void OnmarkChanged();
    #endregion
	
	public mediaMarks()
	{
		this._relatedMarkNMedia = new EntitySet<relatedMarkNMedia>(new Action<relatedMarkNMedia>(this.attach_relatedMarkNMedia), new Action<relatedMarkNMedia>(this.detach_relatedMarkNMedia));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mark", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string mark
	{
		get
		{
			return this._mark;
		}
		set
		{
			if ((this._mark != value))
			{
				this.OnmarkChanging(value);
				this.SendPropertyChanging();
				this._mark = value;
				this.SendPropertyChanged("mark");
				this.OnmarkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaMarks_relatedMarkNMedia", Storage="_relatedMarkNMedia", ThisKey="id", OtherKey="markid")]
	public EntitySet<relatedMarkNMedia> relatedMarkNMedia
	{
		get
		{
			return this._relatedMarkNMedia;
		}
		set
		{
			this._relatedMarkNMedia.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_relatedMarkNMedia(relatedMarkNMedia entity)
	{
		this.SendPropertyChanging();
		entity.mediaMarks = this;
	}
	
	private void detach_relatedMarkNMedia(relatedMarkNMedia entity)
	{
		this.SendPropertyChanging();
		entity.mediaMarks = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mediaType")]
public partial class mediaType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private System.Nullable<int> _father_id;
	
	private string _comment;
	
	private EntitySet<media> _media;
	
	private EntitySet<mediaType> _mediaType2;
	
	private EntityRef<mediaType> _mediaType1;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onfather_idChanging(System.Nullable<int> value);
    partial void Onfather_idChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
	
	public mediaType()
	{
		this._media = new EntitySet<media>(new Action<media>(this.attach_media), new Action<media>(this.detach_media));
		this._mediaType2 = new EntitySet<mediaType>(new Action<mediaType>(this.attach_mediaType2), new Action<mediaType>(this.detach_mediaType2));
		this._mediaType1 = default(EntityRef<mediaType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_father_id", DbType="Int")]
	public System.Nullable<int> father_id
	{
		get
		{
			return this._father_id;
		}
		set
		{
			if ((this._father_id != value))
			{
				if (this._mediaType1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onfather_idChanging(value);
				this.SendPropertyChanging();
				this._father_id = value;
				this.SendPropertyChanged("father_id");
				this.Onfather_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(512)")]
	public string comment
	{
		get
		{
			return this._comment;
		}
		set
		{
			if ((this._comment != value))
			{
				this.OncommentChanging(value);
				this.SendPropertyChanging();
				this._comment = value;
				this.SendPropertyChanged("comment");
				this.OncommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaType_media", Storage="_media", ThisKey="id", OtherKey="typeID")]
	public EntitySet<media> media
	{
		get
		{
			return this._media;
		}
		set
		{
			this._media.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaType_mediaType", Storage="_mediaType2", ThisKey="id", OtherKey="father_id")]
	public EntitySet<mediaType> mediaType2
	{
		get
		{
			return this._mediaType2;
		}
		set
		{
			this._mediaType2.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaType_mediaType", Storage="_mediaType1", ThisKey="father_id", OtherKey="id", IsForeignKey=true)]
	public mediaType mediaType1
	{
		get
		{
			return this._mediaType1.Entity;
		}
		set
		{
			mediaType previousValue = this._mediaType1.Entity;
			if (((previousValue != value) 
						|| (this._mediaType1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._mediaType1.Entity = null;
					previousValue.mediaType2.Remove(this);
				}
				this._mediaType1.Entity = value;
				if ((value != null))
				{
					value.mediaType2.Add(this);
					this._father_id = value.id;
				}
				else
				{
					this._father_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("mediaType1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_media(media entity)
	{
		this.SendPropertyChanging();
		entity.mediaType = this;
	}
	
	private void detach_media(media entity)
	{
		this.SendPropertyChanging();
		entity.mediaType = null;
	}
	
	private void attach_mediaType2(mediaType entity)
	{
		this.SendPropertyChanging();
		entity.mediaType1 = this;
	}
	
	private void detach_mediaType2(mediaType entity)
	{
		this.SendPropertyChanging();
		entity.mediaType1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mediaVoteRecords")]
public partial class mediaVoteRecords : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private System.Guid _mediaID;
	
	private EntityRef<media> _media;
	
	private EntityRef<users> _users;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnmediaIDChanging(System.Guid value);
    partial void OnmediaIDChanged();
    #endregion
	
	public mediaVoteRecords()
	{
		this._media = default(EntityRef<media>);
		this._users = default(EntityRef<users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid mediaID
	{
		get
		{
			return this._mediaID;
		}
		set
		{
			if ((this._mediaID != value))
			{
				if (this._media.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnmediaIDChanging(value);
				this.SendPropertyChanging();
				this._mediaID = value;
				this.SendPropertyChanged("mediaID");
				this.OnmediaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="media_mediaVoteRecords", Storage="_media", ThisKey="mediaID", OtherKey="id", IsForeignKey=true)]
	public media media
	{
		get
		{
			return this._media.Entity;
		}
		set
		{
			media previousValue = this._media.Entity;
			if (((previousValue != value) 
						|| (this._media.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._media.Entity = null;
					previousValue.mediaVoteRecords.Remove(this);
				}
				this._media.Entity = value;
				if ((value != null))
				{
					value.mediaVoteRecords.Add(this);
					this._mediaID = value.id;
				}
				else
				{
					this._mediaID = default(System.Guid);
				}
				this.SendPropertyChanged("media");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_mediaVoteRecords", Storage="_users", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
	public users users
	{
		get
		{
			return this._users.Entity;
		}
		set
		{
			users previousValue = this._users.Entity;
			if (((previousValue != value) 
						|| (this._users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._users.Entity = null;
					previousValue.mediaVoteRecords.Remove(this);
				}
				this._users.Entity = value;
				if ((value != null))
				{
					value.mediaVoteRecords.Add(this);
					this._userID = value.id;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.relatedMarkNMedia")]
public partial class relatedMarkNMedia : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _markid;
	
	private System.Guid _mediaid;
	
	private EntityRef<media> _media;
	
	private EntityRef<mediaMarks> _mediaMarks;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmarkidChanging(System.Guid value);
    partial void OnmarkidChanged();
    partial void OnmediaidChanging(System.Guid value);
    partial void OnmediaidChanged();
    #endregion
	
	public relatedMarkNMedia()
	{
		this._media = default(EntityRef<media>);
		this._mediaMarks = default(EntityRef<mediaMarks>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_markid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid markid
	{
		get
		{
			return this._markid;
		}
		set
		{
			if ((this._markid != value))
			{
				if (this._mediaMarks.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnmarkidChanging(value);
				this.SendPropertyChanging();
				this._markid = value;
				this.SendPropertyChanged("markid");
				this.OnmarkidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid mediaid
	{
		get
		{
			return this._mediaid;
		}
		set
		{
			if ((this._mediaid != value))
			{
				if (this._media.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnmediaidChanging(value);
				this.SendPropertyChanging();
				this._mediaid = value;
				this.SendPropertyChanged("mediaid");
				this.OnmediaidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="media_relatedMarkNMedia", Storage="_media", ThisKey="mediaid", OtherKey="id", IsForeignKey=true)]
	public media media
	{
		get
		{
			return this._media.Entity;
		}
		set
		{
			media previousValue = this._media.Entity;
			if (((previousValue != value) 
						|| (this._media.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._media.Entity = null;
					previousValue.relatedMarkNMedia.Remove(this);
				}
				this._media.Entity = value;
				if ((value != null))
				{
					value.relatedMarkNMedia.Add(this);
					this._mediaid = value.id;
				}
				else
				{
					this._mediaid = default(System.Guid);
				}
				this.SendPropertyChanged("media");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaMarks_relatedMarkNMedia", Storage="_mediaMarks", ThisKey="markid", OtherKey="id", IsForeignKey=true)]
	public mediaMarks mediaMarks
	{
		get
		{
			return this._mediaMarks.Entity;
		}
		set
		{
			mediaMarks previousValue = this._mediaMarks.Entity;
			if (((previousValue != value) 
						|| (this._mediaMarks.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._mediaMarks.Entity = null;
					previousValue.relatedMarkNMedia.Remove(this);
				}
				this._mediaMarks.Entity = value;
				if ((value != null))
				{
					value.relatedMarkNMedia.Add(this);
					this._markid = value.id;
				}
				else
				{
					this._markid = default(System.Guid);
				}
				this.SendPropertyChanged("mediaMarks");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userMediaFolder")]
public partial class userMediaFolder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _id;
	
	private int _ownerID;
	
	private string _name;
	
	private string _authorization;
	
	private string _protectedPwd;
	
	private string _comment;
	
	private EntitySet<media> _media;
	
	private EntityRef<users> _users;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnownerIDChanging(int value);
    partial void OnownerIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnauthorizationChanging(string value);
    partial void OnauthorizationChanged();
    partial void OnprotectedPwdChanging(string value);
    partial void OnprotectedPwdChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
	
	public userMediaFolder()
	{
		this._media = new EntitySet<media>(new Action<media>(this.attach_media), new Action<media>(this.detach_media));
		this._users = default(EntityRef<users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ownerID", DbType="Int NOT NULL")]
	public int ownerID
	{
		get
		{
			return this._ownerID;
		}
		set
		{
			if ((this._ownerID != value))
			{
				if (this._users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnownerIDChanging(value);
				this.SendPropertyChanging();
				this._ownerID = value;
				this.SendPropertyChanged("ownerID");
				this.OnownerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(32) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[authorization]", Storage="_authorization", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string authorization
	{
		get
		{
			return this._authorization;
		}
		set
		{
			if ((this._authorization != value))
			{
				this.OnauthorizationChanging(value);
				this.SendPropertyChanging();
				this._authorization = value;
				this.SendPropertyChanged("authorization");
				this.OnauthorizationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_protectedPwd", DbType="NChar(32)")]
	public string protectedPwd
	{
		get
		{
			return this._protectedPwd;
		}
		set
		{
			if ((this._protectedPwd != value))
			{
				this.OnprotectedPwdChanging(value);
				this.SendPropertyChanging();
				this._protectedPwd = value;
				this.SendPropertyChanged("protectedPwd");
				this.OnprotectedPwdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(2048)")]
	public string comment
	{
		get
		{
			return this._comment;
		}
		set
		{
			if ((this._comment != value))
			{
				this.OncommentChanging(value);
				this.SendPropertyChanging();
				this._comment = value;
				this.SendPropertyChanged("comment");
				this.OncommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userMediaFolder_media", Storage="_media", ThisKey="id", OtherKey="userFolderID")]
	public EntitySet<media> media
	{
		get
		{
			return this._media;
		}
		set
		{
			this._media.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_userMediaFolder", Storage="_users", ThisKey="ownerID", OtherKey="id", IsForeignKey=true)]
	public users users
	{
		get
		{
			return this._users.Entity;
		}
		set
		{
			users previousValue = this._users.Entity;
			if (((previousValue != value) 
						|| (this._users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._users.Entity = null;
					previousValue.userMediaFolder.Remove(this);
				}
				this._users.Entity = value;
				if ((value != null))
				{
					value.userMediaFolder.Add(this);
					this._ownerID = value.id;
				}
				else
				{
					this._ownerID = default(int);
				}
				this.SendPropertyChanged("users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_media(media entity)
	{
		this.SendPropertyChanging();
		entity.userMediaFolder = this;
	}
	
	private void detach_media(media entity)
	{
		this.SendPropertyChanging();
		entity.userMediaFolder = null;
	}
}

public partial class NewUserResult
{
	
	private int _Column1;
	
	public NewUserResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="Int NOT NULL")]
	public int Column1
	{
		get
		{
			return this._Column1;
		}
		set
		{
			if ((this._Column1 != value))
			{
				this._Column1 = value;
			}
		}
	}
}
#pragma warning restore 1591
